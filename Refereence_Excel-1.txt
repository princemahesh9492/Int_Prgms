Programs
=========
import java.util.LinkedHashMap;
import java.util.Map;

1)public class CountCharAdv {
    public static String convertString(String s) {
        // Check for null or empty string
        if (s == null || s.isEmpty()) {
            return "";
        }

        Map<Character, Integer> charCountMap = new LinkedHashMap<>();

        // Count occurrences of each character
        for (char c : s.toCharArray()) {
            charCountMap.put(c, charCountMap.getOrDefault(c, 0) + 1);
        }

        StringBuilder result = new StringBuilder();

        // Build the result string
        for (Map.Entry<Character, Integer> entry : charCountMap.entrySet()) {
            result.append(entry.getKey()).append(entry.getValue());
        }

        return result.toString();
    }

    public static void main(String[] args) {
        System.out.println(convertString("aabbb")); // Output: a2b3
        System.out.println(convertString("aaaa"));  // Output: a4
        System.out.println(convertString("a"));     // Output: a1
    }
}

=============================================================================================
2)public class FindWordLength {

    public static void main(String[] args){
        String[] dict = {"CODGE", "ODG", "LODGES", "SODG", "dodge", "mODJ", "LODGESSSS"};
        String toSearch = "ODG";

       int maxLength= findMaxLengthWord(dict,toSearch);
        System.out.println("Max length of the Word: "+maxLength);

    }

    public static int findMaxLengthWord(String[] dict, String toSearch){
        int maxLength=0;
        for(String word: dict)
        {

            if(word.contains(toSearch)){
               maxLength= Math.max(maxLength,word.length());
            }

        }
        return maxLength;
    }
}


===============================================================================================

import java.io.*;
import java.util.*;
import java.util.ArrayList;

3)class Solution {
  public static void main(String[] args) {
    
    String[] arr = {"apple", "applet", "bread", "aper"};
    String prefix = "app";

ArrayList<String> output= wordsWithPrefix(arr,prefix);
System.out.println("The prefix contained words are :"+ output);


}

public static ArrayList<String> wordsWithPrefix(String[] arr, String prefix){

  //String[] output = new String[arr.length];
  ArrayList<String> list = new ArrayList<String>();
  for(int i=0;i<arr.length;i++){
    if(arr[i].contains(prefix)){
      list.add(arr[i]);
    }

  }


  return list;

}

========================================================================================

4)
import java.util.HashMap;

public class Sample {
    public static Character firstNonRepeating(String str) {
        HashMap<Character, Integer> charCount = new HashMap<>();

        // Count occurrences of each character
        for (char c : str.toCharArray()) {
            charCount.put(c, charCount.getOrDefault(c, 0) + 1);
        }

        // Find the first character with a count of 1
        for (char c : str.toCharArray()) {
            if (charCount.get(c) == 1) {
                return c;
            }
        }

        return null; // Return null if no non-repeating character is found
    }

    public static void main(String[] args) {
        String str1 = "12345";
        System.out.println("First non-repeating character: " + firstNonRepeating(str1)); // Output: 1

        String str2 = "abbacd";
        System.out.println("First non-repeating character: " + firstNonRepeating(str2)); // Output: c
    }
}

===========================================================================================
5)
public class SmallestMissingInteger {
    public static int smallestMissingInteger(int[] arr) {
        int n = arr.length;

        
        if (n == 0 || arr[0] > 0) {
            return 0;
        }


        for (int i = 0; i < n; i++) {

            if (arr[i] != i) {
                return i;
            }
        }


        return n;
    }

    public static void main(String[] args) {
        int[] arr1 = {1, 2, 3, 4};
        int[] arr2 = {0, 1, 3, 4};

        System.out.println("Smallest missing integer of arr1 is: " + smallestMissingInteger(arr1));
        System.out.println("Smallest missing integer of arr2 is: " + smallestMissingInteger(arr2));
    }
}

============================================================================================
6)public class FindMedianOfSortedArrays {

    public static double findMedianSortedArrays(int[] arr1, int[] arr2) {
        int[] merged = new int[arr1.length + arr2.length];
        int i = 0, j = 0, k = 0;

        // Merge the two arrays
        while (i < arr1.length && j < arr2.length) {
            if (arr1[i] < arr2[j]) {
                merged[k++] = arr1[i++];
            } else {
                merged[k++] = arr2[j++];
            }
        }

        // Copy remaining elements
        while (i < arr1.length) {
            merged[k++] = arr1[i++];
        }
        while (j < arr2.length) {
            merged[k++] = arr2[j++];
        }

        // Calculate the median
        int n = merged.length;
        if (n % 2 == 0) {
            return (merged[n / 2 - 1] + merged[n / 2]) / 2.0;
        } else {
            return merged[n / 2];
        }
    }

    public static void main(String[] args) {
        int[] arr1 = {1, 2, 5, 8};
        int[] arr2 = {18, 20, 24, 26, 28, 30};

        double median = findMedianSortedArrays(arr1, arr2);
        System.out.println("The median of two sorted arrays is: " + median);
    }
}

==============================================================================================
7)
public class WordMinDistance {

    public static int sentenceMinDistance(String input,String input1, String input2){
        String[] sentence=input.split(" ");
        int minDistance=Integer.MAX_VALUE;
        int index1=-1;
        int index2=-1;
        for(int i=0;i<sentence.length;i++){
            if(sentence[i].equals(input1)){
                index1=i;
                if(index2!=1){
                    minDistance=Math.min(minDistance,index1-index2);
                }
            } else if (sentence[i].equals(input2)) {
                index2=i;
                if(index1!=1){
                    minDistance=Math.min(minDistance,index2-index1);
                }

            }
        }

        return minDistance==Integer.MAX_VALUE?-1:minDistance;
    }
    public static void main(String[] args){
        String word = "the quick the brown quick brown the frog";
        String word1 = "quick";
        String word2 = "frog";
        int minDistance=sentenceMinDistance(word,word1,word2);
        System.out.println(minDistance);

    }
}

==============================================================================
8)public class SingleWindowTech {

    public static void main(String[] args) {
        //This is Fixed Size Window Technique
        int[] sampleArr = {1,2,3,4,5,6,1,};

        //Here "k" indicates the size of the window
        int k=3;
        int output = getMaxSumSubArrayOfSize(sampleArr,k);
        System.out.println("The output of SWT is..."+output);
    }
    public static int getMaxSumSubArrayOfSize(int[] sampleArr, int k)
    {
        int windowSum =0, maxSum=0;

        //Calculating sum for the first window and store into winoowSum variable
        for(int i=0;i<k;i++){
            windowSum=windowSum+sampleArr[i];
        }
        System.out.println("The value of windowSum is.."+windowSum);

        //removing first index and adding end+1 index to the window keep on
        for(int end=k; end<sampleArr.length;end++){
            windowSum=windowSum+sampleArr[end] - sampleArr[end-k];
            maxSum=Math.max(maxSum, windowSum);
        }

       return maxSum;
    }
}
=========================================================================================
9)public class SumGreaterThanTarget {

    public static void main(String[] args){
        int[] sampleArr = {1,9,-1,-2,7,3,-1,2};
        int target=3;
        int output = smallestSubarrayWithSum(sampleArr,target);
        System.out.println("The output of SWT is..."+output);

    }
    public static int smallestSubarrayWithSum(int[] arr, int target) {
        int n = arr.length;
        int minLength = Integer.MAX_VALUE;
        int windowSum = 0;
        int left = 0;

        for (int right = 0; right < n; right++) {
            windowSum += arr[right];

            while (windowSum >= target) {
                minLength = Math.min(minLength, right - left + 1);
                windowSum -= arr[left];
                left++;
            }
        }
        return (minLength == Integer.MAX_VALUE) ? 0 : minLength;
    }
}
======================================================================================
10)public class PowerOfNumber {



        public static boolean isPowerOfTen(int n) {
            if (n <= 0) {
                return false; // Only positive numbers can be powers of 10
            }

            while (n % 10 == 0) {
                n /= 10; // Divide by 10 until it is no longer divisible
            }

            return n == 1; // If we end up with 1, it's a power of 10
        }

        public static void main(String[] args) {
            int n1 = 100;  // Should return true
            int n2 = 50;    // Should return false
            int n3 = 1;     // Should return true
            int n4 = 0;     // Should return false

            System.out.println(n1 + " is a power of 10: " + isPowerOfTen(n1));
            System.out.println(n2 + " is a power of 10: " + isPowerOfTen(n2));
            System.out.println(n3 + " is a power of 10: " + isPowerOfTen(n3));
            System.out.println(n4 + " is a power of 10: " + isPowerOfTen(n4));
        }
    }
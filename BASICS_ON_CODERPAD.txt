LinearSearch
============

/*
 * Click `Run` to execute the snippet below!
 */

import java.io.*;
import java.util.*;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */

class Solution {
  public static void main(String[] args) {

    int[] arr = {10,40,30,20,90};
    int target =10;
    linearSearch(arr,target);

  }
  public static void linearSearch(int[] arr, int target){
     boolean isFound = false;

     for(int i=0;i<arr.length;i++){
       if(target == arr[i]){
        isFound = true;
         System.out.println("The element found at the index .. "+ i);
         break;
       }

     }
     if(!isFound){
      System.out.println("The element is not found in given array");
     }


     
  }
}
=================================================================================
BinarySearch
============

/*
 * Click `Run` to execute the snippet below!
 */

import java.io.*;
import java.util.*;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */

class Solution {
  public static void main(String[] args) {
    
    //In case of binary search, The elements of Array should be in 
    //sorted order.
    int[] arr  = {10,20,30,40,50,60,70,80,90,100};
    int target = 0;
    binarySearch(arr, target);

  }

  public static void binarySearch(int[] arr, int target){

    //Define low, high values based on index.
    int low =0;
    int high = arr.length -1;
    boolean isFound = false;

    while(low<=high){

      
       //Find the mid value to check whether target value is equal to 
       //mid value or not

       int mid = (low + high)/2;

       if(target == arr[mid]){

        isFound = true;
        System.out.println("The element is found at index ..."+ mid);
        break;  
       }
       else if(target < arr[mid]){
          high = mid -1;
       }
       else if(target>arr[mid]){
        low = mid+1;
       }

    }
    if(!isFound){
      System.out.println("The element is not found in given container");
    }

  }
  
}
====================================================================================
//BubbleSort

/*
 * Click `Run` to execute the snippet below!
 */

import java.io.*;
import java.util.*;

import javax.management.modelmbean.RequiredModelMBean;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */

class Solution {
  public static void main(String[] args) {

    int[] arr = {50,40,30,20,10};
    bubbleSort(arr);
    System.out.println(Arrays.toString(arr));
    
    
  } 

  public static void bubbleSort(int[] arr){

    int n = arr.length;
for(int i =0; i<n-1; i++){

    //If 5 elements are there then 4 comparisions/iterations are required.
    //If 4 elements are there then 3 comparisions/iteratiions are required.
    
    //That is why we mentioned length-1 in below and above means less than 4 i.e, till 3rd iteration means 4 iterations.

    // We mentioned -i bcz last element/elements are already sorted So,That is why need not to be compared again.

    for(int j=0;j<n-1-i;j++){

      //Swap the elements if the current element is  
      //bigger than to its next element.
      if(arr[j]>arr[j+1]){

        int temp = arr[j];
        arr[j] = arr[j+1];
        arr[j+1] = temp;
        
      }//if

    }//for

}//for

  }//bubbleSort
  
}//Solution
==========================================================================================
PALINDROME
============
Approache1
==========

/*
 * Click `Run` to execute the snippet below!
 */

import java.io.*;
import java.util.*;

import javax.management.modelmbean.RequiredModelMBean;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */

class Solution {
  public static void main(String[] args) {

     String str= "MADAM";//RADAR,MOM,DAD,SIS,RACECAR

     System.out.println(isPalindrome(str));
    
    
  } 

  public static boolean isPalindrome(String str){

    String reversed = "";

    for(int i = str.length()-1;i>=0;i--){

      reversed = reversed + str.charAt(i);
    }

    if(str.equals(reversed)){
      return true;
    }


    return false;
  }


  
}//Solution


//Approache2
=============
/*
 * Click `Run` to execute the snippet below!
 */

import java.io.*;
import java.util.*;

import javax.management.modelmbean.RequiredModelMBean;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */

class Solution {
  public static void main(String[] args) {

   String str = "MADAM"; //RADAR,DAD,MOM,SIS,RACECAR

   System.out.println(isPalindrome(str));
    
    
  } 

  public static boolean isPalindrome(String str){


    //Defining two variables one for starting position and another one for ending
	//Positiion
    int left =0;
    int right = str.length()-1;

    while(left<right){
	
	//Checking first char is equal to the last char of the given String
	//If both are not equal then consider given string is not a Palindrome or else
	//If both are equal through out String then it is considered as a Palindrome.	
     if(str.charAt(left)!= str.charAt(right)){
       
       return false;

     }
	 

     left++;//Moving first char to the next position.
     right--;//Moving last char to the previous position.

    }

    return true;
  }
  
}//Solution
=================================================================================
STRING REVERSE
==============
/*
 * Click `Run` to execute the snippet below!
 */

import java.io.*;
import java.util.*;

import javax.management.modelmbean.RequiredModelMBean;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */

class Solution {
  public static void main(String[] args) {

  //
  //System.out.println(new StringBuffer().append("Mahesh").reverse());//Approaache1

  String str = "Choomk";

  char [] ch = str.toCharArray();

  String reverse = "";

  //for(int i  = ch.length-1;i>=0;i--){

  //   reverse = reverse + str.charAt(i);

  //}
  
//Till the above 2nd Approache

//The below is 3rd Approache
  for(int i = str.length()-1;i>=0;i--){

    reverse = reverse + str.charAt(i);
  }
    
    System.out.println(reverse);
  } 
  
  //Words REVERSE
  //Reversing words

  String[] tokens = str.split(" ");

  for(int i = tokens.length-1; i>=0; i--){
     
       for(int j=tokens[i].length()-1;j>=0;j--)
       {
         reverse = reverse + tokens[i].charAt(j);
       }
  }
    
    System.out.println(reverse);
  } 


  
}

===================================================================================

Swapping
=========
/*
 * Click `Run` to execute the snippet below!
 */

import java.io.*;
import java.util.*;

import javax.management.modelmbean.RequiredModelMBean;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */

class Solution {
  public static void main(String[] args) {

   Scanner sc = new Scanner(System.in);
   
   System.out.println("Enter the number for X and Y values :");

   int x =sc.nextInt();
   int y =sc.nextInt();

System.out.println("The entered X and Y values are: " + x +"..." +y);
   int temp = x;
    x=y;
    y=temp;

    System.out.println("Swapped Values of X and Y values are: " + x +"..." +y);


  }
  
}

Without using 3rd variables
===========================
/*
 * Click `Run` to execute the snippet below!
 */

import java.io.*;
import java.util.*;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */

class Solution {
  public static void main(String[] args) {

    System.out.println("Enter the numbers X and Y: ");

    //Creating Scanner Object used to get keyboard values
    Scanner sc = new Scanner(System.in);
    int x = sc.nextInt();
    int y = sc.nextInt();

    System.out.println("Entered Values are :"+ x +"..."+y);

    x = x+y;
    y = x-y;
    x = x-y;

    System.out.println("The Swapped Values of x and y are.."+ x +"..."+y);


  }
}

==============================================================================

PrimeNumber
===========

/*
 * Click `Run` to execute the snippet below!
 */

import java.io.*;
import java.util.*;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */

class Solution {
  public static void main(String[] args) {
    int num, temp;
    boolean isPrime = true;
    System.out.println("Enter the number to find Prime : ");
    Scanner sc = new Scanner(System.in);
    num = sc.nextInt();

    for(int i =2;i<=num/2;i++){
        
        temp = num%2;
        if(temp ==0){
          isPrime = false;
        }

    }

    if(isPrime){
      System.out.println("The entered number is Prime");
    }
    else
    {
      System.out.println("The entered number is not Prime");
    }

  }
}
================================================================================================================================================================
Fibonacci Series
================
/*
 * Click `Run` to execute the snippet below!
 */

import java.io.*;
import java.util.*;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */

class Solution {
  public static void main(String[] args) {
 
   int num = 10,a=0,b=1,count=0,c;
   System.out.println(a);
   System.out.println(b);
   
   while(count<=num){

    c=a+b;
    System.out.println(c);

    a=b;
    b=c;
    count++;
   }

  }
}
Factorial
=========
class Solution {
  public static void main(String[] args) {
   
   int factResult=1,num=5;
   for(int i=1;i<=num;i++){
     factResult = factResult*i;
   }

   System.out.println(factResult);
  
  }
}

Second Largest Element in an Array
==================================
/*
 * Click `Run` to execute the snippet below!
 */

import java.io.*;
import java.util.*;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */

class Solution {
  public static void main(String[] args) {
   
   int[] arr = {0,8,5,3,21,45,87,32,11};

   //System.out.println(Arrays.toString(arr));

   for(int i :arr){
    System.out.println(i);
   }
    
   int largest = Integer.MIN_VALUE;
   int secondLargest = Integer.MIN_VALUE;
   
   
   for(int i=0;i<arr.length;i++){

     if(arr[i]>largest){
      secondLargest=largest;
      largest = arr[i];
     }
     else if(arr[i]>secondLargest && arr[i]!=largest){
      secondLargest=arr[i];
     }  


   }

   System.out.println("The second largest element of the array is :"+ secondLargest);
  }
}



Duplicate Characters
====================
/*
 * Click `Run` to execute the snippet below!
 */

import java.io.*;
import java.util.*;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */

class Solution {
  public static void main(String[] args) {

    String str = "kkrbbgg";
    int count=0;
    char[] ch = str.toCharArray();

    for(int i=0;i<ch.length;i++){

      for(int j=i+1;j<ch.length;j++){

        if(ch[i]==ch[j]){
           
           count++;
          System.out.println(ch[j]);
        }

      }
    }

  System.out.println("The duplicate characteres count is :"+count);
  
  }
}

Armstrong Number
================
Armstrong number is the number which is the sum of the cubes of all its unit, tens and hundred digits for three-digit numbers.

153 = 1*1*1 + 5*5*5 + 3*3*3 = 1 + 125 + 27 = 153

/*
 * Click `Run` to execute the snippet below!
 */

import java.io.*;
import java.util.*;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */

class Solution {
  public static void main(String[] args) {
   
   int num = 153,temp,digit,sumOfCubes=0;
   temp=num;
   while(num>0){
      digit=num%10;
      num=num/10;
      //System.out.println(remNum);
      sumOfCubes= sumOfCubes+(digit * digit * digit);
   }

   if( temp== sumOfCubes){

     System.out.println("The given number is Armstrong" + temp);
   }
   else{
    System.out.println("The given number is not an Armstrong number"+temp);
   }

  }
}
============================================================================================================
/*
 * Click `Run` to execute the snippet below!
 */

import java.io.*;
import java.util.*;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */

class Solution {
  public static void main(String[] args) {

    int num=1,temp;
    double rem,digits=0,sumOfCubes=0;
    temp=num;

    while(num>0){
      num=num/10;
      digits++;
    }

    num=temp;

    while(num>0){
      rem=num%10; //Extract Last digit every time
      num=num/10; //Remove the Last digit from the number
      sumOfCubes = sumOfCubes+(Math.pow(rem, digits));
      System.out.println("The sumOfCubes is"+sumOfCubes);
    }

    if(temp == sumOfCubes){
      System.out.println("The given number is an armstrong"+temp);
    }
    else{
      System.out.println("The given number is not an armstrong"+temp);
    }
   
   

  }
}
===========================================================
class Solution {
  public static void main(String[] args) {

  String str = "The   Java   Langueage    is   too   Vast";
   String str2 = str.replaceAll("\\s", "");

   System.out.println(str2);
   

  }
}

Count Strings
=============
/*
 * Click `Run` to execute the snippet below!
 */

import java.io.*;
import java.util.*;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */

class Solution {
  public static void main(String[] args) {

   String str = "The value jobs are givena are";
   countWords(str);
  }
  public static void countWords(String str){

    Map<String,Integer> map = new LinkedHashMap<String,Integer>();
    String[] words = str.split(" ");
    for(String word : words){

      map.put(word,map.getOrDefault(word, 0)+1);
    }

    
    for(Map.Entry<String,Integer> entry:map.entrySet()){
      System.out.println(entry.getKey()+".."+entry.getValue());
    }
    
  }

}
======================================================================================
MATRIX ADDITION
===============
/*
 * Click `Run` to execute the snippet below!
 */

import java.io.*;
import java.util.*;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */

class Solution {
  public static void main(String[] args) {
   int[][] matrix1 = {{1,2,3},{4,5,6},{7,8,9}};
   int[][] matrix2 = {{2,3,4},{5,6,7},{8,9,8}};

   System.out.println("The given matrixes are :");
   for(int[] a:matrix1){
       System.out.println(Arrays.toString(a));
   }

   for(int[] a:matrix2){
       System.out.println(Arrays.toString(a));
   }

   //System.out.println(Arrays.toString(matrix1));

   //System.out.println(Arrays.toString(matrix2));


   int[][] additionOfMatrix = new int[3][3];

   for(int i=0;i<matrix1.length;i++){

       for(int j=0;j<matrix2.length;j++){
          
          additionOfMatrix[i][j] = matrix1[i][j]-matrix2[i][j];

       }
   }

   System.out.println("The subtraction of 2 matrixes are :");
   for(int[] b:additionOfMatrix){

    System.out.println(Arrays.toString(b));

   }

  }
}
=========================================================================================
